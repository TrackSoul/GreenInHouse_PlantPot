#!/usr/bin/env python3

import os
import time
import inspect
import logging
import connexion  # type: ignore
from typing import Dict
from flask import Flask
from flask import current_app
from flask.logging import default_handler

from authlib.jose import JsonWebSignature  # type: ignore
#from connexion.apps.flask_app import FlaskJSONEncoder

import backend
from backend.data.config import BackendConfiguration
from backend.data.db import Esquema

from backend.service import SensorService, RegistroSensorService, PlantaService, TipoPlantaService, SensorPlantaService
from common.data.util import TipoSensor, ZonaSensor, Planta as PlantaCommon, TipoPlanta as TipoPlantaCommon
from common.data.util import Sensor as SensorCommon, RegistroSensor as RegistroSensorCommon, SensorPlanta as SensorPlantaCommon

import socket

if __name__ == '__main__':
    cfg: BackendConfiguration = BackendConfiguration()
    cfg.load_from_file(cfg.default_config_file())

    #intentos_conexion = 0
    IP = '127.0.0.1'
    while ( IP == '127.0.0.1'): # and intentos_conexion < 10 ):
        time.sleep(10.0)
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            s.connect(('192.255.255.255', 1))
            IP = s.getsockname()[0]
            #intentos_conexion += 1
        except:
            IP = '127.0.0.1'
        finally:
            s.close()
    print("Servidor API-REST desplegado en la ip: ", IP)
    cfg.set_service_host(IP)

    db: Esquema = Esquema(cfg)
    jws: JsonWebSignature = JsonWebSignature()

    specification_dir = os.path.dirname(
        inspect.getfile(backend)) + '/openapi'
    app = connexion.FlaskApp(
        __name__,
        specification_dir=specification_dir,
        options={
            "swagger_ui": True,
            "serve_spec": True
        }
    )

    app.add_api("spec.yml", strict_validation=True)
    flask_app = app.app
    #flask_app.json_encoder = FlaskJSONEncoder
    with flask_app.app_context():
        current_app.db = db
        current_app.cfg = cfg
        current_app.jws = jws
        #current_app.authservice = auth_service

    root_logger = logging.getLogger()
    root_logger.addHandler(default_handler)
 
    app.run(
        host=cfg.get_service_host(),
        port=cfg.get_service_port(),
        debug=cfg.get_debug_flag(),
        use_reloader=False
    )


