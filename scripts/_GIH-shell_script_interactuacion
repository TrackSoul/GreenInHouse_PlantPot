path_install=/GreenInHouse/src
path_venv=/GreenInHouse/venv

#source "$path_venv"/venv_backend/venv_backend_sensors/.venv/bin/activate
source "$path_venv"/venv_backend/venv_backend_api_rest/.venv/bin/activate
cd "$path_install"/components
python3


import os
import inspect
import logging
import connexion  # type: ignore
from datetime import datetime
from typing import Union, List, Dict
from flask import Flask
from flask import current_app
from flask.logging import default_handler
from authlib.jose import JsonWebSignature  # type: ignore
import backend
import common
from backend.data.config import BackendConfiguration
from sqlalchemy.orm.session import Session
from backend.data.db.esquema import Esquema
from backend.data.db.results import Sensor, Planta, RegistroSensor, TipoPlanta, SensorPlanta, ConsejoTipoPlanta
from backend.data.db.resultsets import SensorSet,PlantaSet, RegistroSensorSet, TipoPlantaSet, SensorPlantaSet, ConsejoTipoPlantaSet
from backend.service import SensorService, PlantaService, RegistroSensorService, TipoPlantaService, SensorPlantaService, ConsejoTipoPlantaService
from backend.presentation.rest import sensor_rest, planta_rest, registro_sensor_rest, tipo_planta_rest, consejo_tipo_planta_rest
from common.data.util import Sensor as SensorCommon, RegistroSensor as RegistroSensorCommon, Planta as PlantaCommon
from common.data.util import TipoPlanta as TipoPlantaCommon, SensorPlanta as SensorPlantaCommon, ConsejoTipoPlanta as ConsejoTipoPlantaCommon
from common.data.util import TipoSensor, ZonaSensor, ModeloSensor, TipoMedida, UnidadMedida
from backend.data.util import SensorBackend  #DELETEC COMMENT #
import board #DELETEC COMMENT#
import adafruit_mcp3xxx.mcp3008 as MCP #DELETEC COMMENT#

from sqlalchemy.exc import IntegrityError  # type: ignore
from sqlalchemy.orm.session import Session  # type: ignore
from sqlalchemy.orm.exc import NoResultFound  # type: ignore
from sqlalchemy.sql import func
from http import HTTPStatus

cfg: BackendConfiguration = BackendConfiguration()
cfg.load_from_file(cfg.default_config_file())
db: Esquema = Esquema(cfg)

sensores_activos=SensorService.listAllActive(db)
registros=RegistroSensorService.listAllFromSensorFromCommonBetweenDates(db,sensores_activos[1],datetime(2023,4,24,1,00,00),datetime(2023,4,24,2,00,00))
plants = PlantaService.listAllActive(db)
sensor_plant = SensorPlantaService.listAllSensorsFromPlantFromCommonBetweenDates(db,plants[1],datetime(2023,4,24,1,0,0))
rs = RegistroSensorService.listAllFromPlantFromCommon(db,plants[0])
rs2 = RegistroSensorService.listAllFromPlantFromCommonBetweenDates(db,plants[0],datetime(2023,5,28,1,00,00),datetime(2023,5,29,1,00,00))


rs3 = RegistroSensorService.listAllAvgFromPlantFromCommonBetweenDates(db,plants[0],datetime(2023,5,28,1,00,00),datetime(2023,5,29,1,00,00))

session: Session = db.new_session()
tipo_sensor = TipoSensor.TEMPERATURA_Y_HUMEDAD
zona_sensor = ZonaSensor.AMBIENTE
numero_sensor = 1
fecha_inicio = datetime(2023,5,24,1,00,00)
fecha_fin = datetime(2023,5,25,1,00,00)
RegistroSensorService.getAvgFromSensorBetweenDates(db, tipo_sensor, zona_sensor, numero_sensor,fecha_inicio,fecha_fin)

sensor_temperatura_y_humedad_ambiente_2 = SensorService.create(db,TipoSensor.TEMPERATURA_Y_HUMEDAD,ZonaSensor.AMBIENTE,2,ModeloSensor.DHT11, "Humedad y temperatura ambiente 2 maceta 1", direccion_lectura="RASPBERRY",patilla_0_lectura=board.D20.id, unidad_medida_0=UnidadMedida.PORCENTAJE, unidad_medida_1=UnidadMedida.GRADOS_CENTIGRADOS)
